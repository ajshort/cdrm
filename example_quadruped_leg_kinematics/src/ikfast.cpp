/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-01-24 12:24:38.816652
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=((0.324)*x5);
x7=((0.324)*x2);
x8=(x1*x3);
x9=(x0*x1);
eetrans[0]=(((x7*x9))+(((-1.0)*x0*x4*x6))+(((0.066)*x0))+(((0.109)*x9)));
eetrans[1]=(((x7*x8))+(((-1.0)*x3*x4*x6))+(((0.066)*x3))+(((0.109)*x8)));
eetrans[2]=((((-1.0)*x4*x7))+(((-0.109)*x4))+(((-1.0)*x1*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=py;
new_pz=pz;
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((-1.59277664514668)+(((14.1578887756258)*(pz*pz))));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x10=pz*pz;
IkReal x11=((81000.0)*pz);
j1eval[0]=((1.0)+(((229.568411386593)*x10)));
j1eval[1]=((IKabs(((-1798.5)+(((-1.0)*sj2*x11))+(((-5346.0)*cj2)))))+(IKabs(((((5346.0)*sj2))+(((-27250.0)*pz))+(((-1.0)*cj2*x11))))));
j1eval[2]=IKsign(((1089.0)+(((250000.0)*x10))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x12=pz*pz;
j1eval[0]=((1.0)+(((229.568411386593)*x12)));
j1eval[1]=IKsign(((118701.0)+(((27250000.0)*x12))));
j1eval[2]=((IKabs(((((11092375.0)*pz))+(((-125000000.0)*(pz*pz*pz)))+(((582714.0)*sj2)))))+(IKabs(((732096.75)+(((-8829000.0)*pz*sj2))+(((-8250000.0)*x12))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x13=(cj2*pz);
j1eval[0]=((((15.1515151515152)*x13))+sj2+(((5.09726898615788)*pz)));
j1eval[1]=((IKabs(((13122.0)+(((-13122.0)*(cj2*cj2)))+(((-125000.0)*(pz*pz))))))+(IKabs(((((-4414.5)*sj2))+(((-13122.0)*cj2*sj2))+(((-8250.0)*pz))))));
j1eval[2]=IKsign(((((13625.0)*pz))+(((40500.0)*x13))+(((2673.0)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x14=pz*pz;
IkReal x15=((15.1515151515152)*pz);
IkReal x16=((1.0)+(((229.568411386593)*x14)));
IkReal x23 = x16;
if(IKabs(x23)==0){
continue;
}
IkReal x17=pow(x23,-0.5);
if((x16) < -0.00001)
continue;
IkReal x18=IKabs(IKsqrt(x16));
CheckValue<IkReal> x24=IKPowWithIntegerCheck(x18,-1);
if(!x24.valid){
continue;
}
IkReal x19=x24.value;
IkReal x20=((5.09726898615788)*pz*x19);
if((((1.0)+(((-25.9821511172469)*x14*(x19*x19))))) < -0.00001)
continue;
IkReal x21=IKsqrt(((1.0)+(((-25.9821511172469)*x14*(x19*x19)))));
IkReal x22=(x17*x21);
CheckValue<IkReal> x25 = IKatan2WithCheck(IkReal(x15),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x25.valid){
continue;
}
if( (x20) < -1-IKFAST_SINCOS_THRESH || (x20) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x25.value)))+(((-1.0)*(IKasin(x20)))));
IkReal gconst1=((((-1.0)*x17*x20))+(((-1.0)*x15*x22)));
IkReal gconst2=((((-77.2313482751193)*x14*x17*x19))+x22);
if((((1.0)+(((229.568411386593)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x26=IKPowWithIntegerCheck(IKabs(IKsqrt(((1.0)+(((229.568411386593)*(pz*pz)))))),-1);
if(!x26.valid){
continue;
}
if( (((5.09726898615788)*pz*(x26.value))) < -1-IKFAST_SINCOS_THRESH || (((5.09726898615788)*pz*(x26.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x27 = IKatan2WithCheck(IkReal(((15.1515151515152)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x27.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((5.09726898615788)*pz*(x26.value))))+j2+(x27.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x28=pz*pz;
IkReal x29=((15.1515151515152)*pz);
CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(x29),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x38.valid){
continue;
}
IkReal x30=((1.0)*(x38.value));
IkReal x31=x16;
IkReal x39 = x31;
if(IKabs(x39)==0){
continue;
}
IkReal x32=pow(x39,-0.5);
if((x31) < -0.00001)
continue;
IkReal x33=IKabs(IKsqrt(x31));
CheckValue<IkReal> x40=IKPowWithIntegerCheck(x33,-1);
if(!x40.valid){
continue;
}
IkReal x34=x40.value;
IkReal x35=(pz*x34);
if((((1.0)+(((-25.9821511172469)*x28*(x34*x34))))) < -0.00001)
continue;
IkReal x36=IKsqrt(((1.0)+(((-25.9821511172469)*x28*(x34*x34)))));
IkReal x37=(x32*x36);
px=0;
py=0;
pp=x28;
sj2=gconst1;
cj2=gconst2;
if( (((5.09726888842685)*x35)) < -1-IKFAST_SINCOS_THRESH || (((5.09726888842685)*x35)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*(IKasin(((5.09726888842685)*x35)))))+(((-1.0)*x30)));
if( (((5.09726898615788)*x35)) < -1-IKFAST_SINCOS_THRESH || (((5.09726898615788)*x35)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*x30))+(((-1.0)*(IKasin(((5.09726898615788)*x35))))));
IkReal gconst1=((((-1.0)*x29*x37))+(((-5.09726898615788)*x32*x35)));
IkReal gconst2=(x37+(((-77.2313482751193)*x28*x32*x34)));
IkReal x41=pz*pz;
j1eval[0]=((1.0)+(((229.568411386593)*x41)));
j1eval[1]=IKsign(((1089.0)+(((250000.0)*x41))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x42=(gconst1*pz);
CheckValue<IkReal> x43=IKPowWithIntegerCheck(((1.199)+(((-54.0)*x42))+(((3.564)*gconst2))),-1);
if(!x43.valid){
continue;
}
CheckValue<IkReal> x44=IKPowWithIntegerCheck(((599.5)+(((-27000.0)*x42))+(((1782.0)*gconst2))),-1);
if(!x44.valid){
continue;
}
if( IKabs(((x43.value)*(((((-11.0)*pz))+(((17.496)*gconst1*gconst2))+(((5.886)*gconst1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x44.value)*(((-363.0)+(((8748.0)*(gconst1*gconst1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x43.value)*(((((-11.0)*pz))+(((17.496)*gconst1*gconst2))+(((5.886)*gconst1))))))+IKsqr(((x44.value)*(((-363.0)+(((8748.0)*(gconst1*gconst1)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x43.value)*(((((-11.0)*pz))+(((17.496)*gconst1*gconst2))+(((5.886)*gconst1))))), ((x44.value)*(((-363.0)+(((8748.0)*(gconst1*gconst1)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x45=IKsin(j1);
IkReal x46=IKcos(j1);
IkReal x47=((0.324)*gconst2);
IkReal x48=((0.324)*gconst1);
IkReal x49=(pz*x45);
evalcond[0]=(((pz*x46))+(((-0.066)*x45))+x48);
evalcond[1]=((0.109)+x49+x47+(((0.066)*x46)));
evalcond[2]=((0.088739)+(((-0.014388)*x46))+(((-1.0)*(pz*pz)))+(((-0.218)*x49)));
evalcond[3]=(((x46*x48))+pz+((x45*x47))+(((0.109)*x45)));
evalcond[4]=((0.066)+((x46*x47))+(((-1.0)*x45*x48))+(((0.109)*x46)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x50=((81000.0)*pz);
CheckValue<IkReal> x51=IKPowWithIntegerCheck(IKsign(((1089.0)+(((250000.0)*(pz*pz))))),-1);
if(!x51.valid){
continue;
}
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((((-27250.0)*pz))+(((-1.0)*gconst2*x50))+(((5346.0)*gconst1)))),IkReal(((-1798.5)+(((-1.0)*gconst1*x50))+(((-5346.0)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x51.value)))+(x52.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x53=IKsin(j1);
IkReal x54=IKcos(j1);
IkReal x55=((0.324)*gconst2);
IkReal x56=((0.324)*gconst1);
IkReal x57=(pz*x53);
evalcond[0]=((((-0.066)*x53))+x56+((pz*x54)));
evalcond[1]=((0.109)+(((0.066)*x54))+x55+x57);
evalcond[2]=((0.088739)+(((-0.218)*x57))+(((-1.0)*(pz*pz)))+(((-0.014388)*x54)));
evalcond[3]=((((0.109)*x53))+pz+((x53*x55))+((x54*x56)));
evalcond[4]=((0.066)+(((-1.0)*x53*x56))+(((0.109)*x54))+((x54*x55)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x58=pz*pz;
IkReal x59=((15.1515151515152)*pz);
IkReal x60=((1.0)+(((229.568411386593)*x58)));
if((x60) < -0.00001)
continue;
IkReal x61=IKabs(IKsqrt(x60));
IkReal x67 = x60;
if(IKabs(x67)==0){
continue;
}
IkReal x62=pow(x67,-0.5);
CheckValue<IkReal> x68=IKPowWithIntegerCheck(x61,-1);
if(!x68.valid){
continue;
}
IkReal x63=x68.value;
IkReal x64=((5.09726898615788)*pz*x63);
if((((1.0)+(((-25.9821511172469)*x58*(x63*x63))))) < -0.00001)
continue;
IkReal x65=IKsqrt(((1.0)+(((-25.9821511172469)*x58*(x63*x63)))));
IkReal x66=(x62*x65);
if( (x64) < -1-IKFAST_SINCOS_THRESH || (x64) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(x59),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin(x64))+(((-1.0)*(x69.value))));
IkReal gconst4=(((x59*x66))+(((-1.0)*x62*x64)));
IkReal gconst5=((((-77.2313482751193)*x58*x62*x63))+(((-1.0)*x66)));
if((((1.0)+(((229.568411386593)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x70=IKPowWithIntegerCheck(IKabs(IKsqrt(((1.0)+(((229.568411386593)*(pz*pz)))))),-1);
if(!x70.valid){
continue;
}
if( (((5.09726898615788)*pz*(x70.value))) < -1-IKFAST_SINCOS_THRESH || (((5.09726898615788)*pz*(x70.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(((15.1515151515152)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x71.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2+(((-1.0)*(IKasin(((5.09726898615788)*pz*(x70.value))))))+(x71.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x72=pz*pz;
IkReal x73=((15.1515151515152)*pz);
CheckValue<IkReal> x82 = IKatan2WithCheck(IkReal(x73),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x82.valid){
continue;
}
IkReal x74=((1.0)*(x82.value));
IkReal x75=x60;
if((x75) < -0.00001)
continue;
IkReal x76=IKabs(IKsqrt(x75));
IkReal x83 = x75;
if(IKabs(x83)==0){
continue;
}
IkReal x77=pow(x83,-0.5);
CheckValue<IkReal> x84=IKPowWithIntegerCheck(x76,-1);
if(!x84.valid){
continue;
}
IkReal x78=x84.value;
IkReal x79=(pz*x78);
if((((1.0)+(((-25.9821511172469)*x72*(x78*x78))))) < -0.00001)
continue;
IkReal x80=IKsqrt(((1.0)+(((-25.9821511172469)*x72*(x78*x78)))));
IkReal x81=(x77*x80);
px=0;
py=0;
pp=x72;
sj2=gconst4;
cj2=gconst5;
if( (((5.09726888842685)*x79)) < -1-IKFAST_SINCOS_THRESH || (((5.09726888842685)*x79)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(IKasin(((5.09726888842685)*x79)))+(((-1.0)*x74)));
if( (((5.09726898615788)*x79)) < -1-IKFAST_SINCOS_THRESH || (((5.09726898615788)*x79)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x74))+(IKasin(((5.09726898615788)*x79))));
IkReal gconst4=(((x73*x81))+(((-5.09726898615788)*x77*x79)));
IkReal gconst5=((((-1.0)*x81))+(((-77.2313482751193)*x72*x77*x78)));
IkReal x85=pz*pz;
j1eval[0]=((1.0)+(((229.568411386593)*x85)));
j1eval[1]=IKsign(((1089.0)+(((250000.0)*x85))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x86=IKPowWithIntegerCheck(IKsign(((((13625.0)*pz))+(((40500.0)*gconst5*pz))+(((2673.0)*gconst4)))),-1);
if(!x86.valid){
continue;
}
CheckValue<IkReal> x87 = IKatan2WithCheck(IkReal(((((13122.0)*(gconst4*gconst4)))+(((-125000.0)*(pz*pz))))),IkReal(((((-13122.0)*gconst4*gconst5))+(((-4414.5)*gconst4))+(((-8250.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x87.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x86.value)))+(x87.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x88=IKsin(j1);
IkReal x89=IKcos(j1);
IkReal x90=((0.324)*gconst5);
IkReal x91=((0.324)*gconst4);
IkReal x92=((0.324)*x89);
IkReal x93=(pz*x88);
evalcond[0]=(((pz*x89))+x91+(((-0.066)*x88)));
evalcond[1]=((0.109)+(((0.066)*x89))+x90+x93);
evalcond[2]=((0.088739)+(((-0.014388)*x89))+(((-0.218)*x93))+(((-1.0)*(pz*pz))));
evalcond[3]=(((x89*x91))+((x88*x90))+pz+(((0.109)*x88)));
evalcond[4]=((0.066)+((x89*x90))+(((0.109)*x89))+(((-1.0)*x88*x91)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x94=((81000.0)*pz);
CheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((1089.0)+(((250000.0)*(pz*pz))))),-1);
if(!x95.valid){
continue;
}
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x94))+(((-27250.0)*pz))+(((5346.0)*gconst4)))),IkReal(((-1798.5)+(((-1.0)*gconst4*x94))+(((-5346.0)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j1);
IkReal x99=((0.324)*gconst5);
IkReal x100=((0.324)*gconst4);
IkReal x101=((0.324)*x98);
IkReal x102=(pz*x97);
evalcond[0]=(x100+((pz*x98))+(((-0.066)*x97)));
evalcond[1]=((0.109)+x102+x99+(((0.066)*x98)));
evalcond[2]=((0.088739)+(((-0.014388)*x98))+(((-1.0)*(pz*pz)))+(((-0.218)*x102)));
evalcond[3]=(((x100*x98))+((x97*x99))+(((0.109)*x97))+pz);
evalcond[4]=((0.066)+(((0.109)*x98))+((x98*x99))+(((-1.0)*x100*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x103 = IKatan2WithCheck(IkReal(((13122.0)+(((-13122.0)*(cj2*cj2)))+(((-125000.0)*(pz*pz))))),IkReal(((((-4414.5)*sj2))+(((-13122.0)*cj2*sj2))+(((-8250.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x103.valid){
continue;
}
CheckValue<IkReal> x104=IKPowWithIntegerCheck(IKsign(((((13625.0)*pz))+(((40500.0)*cj2*pz))+(((2673.0)*sj2)))),-1);
if(!x104.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x103.value)+(((1.5707963267949)*(x104.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x105=IKsin(j1);
IkReal x106=IKcos(j1);
IkReal x107=((0.324)*cj2);
IkReal x108=((0.324)*sj2);
IkReal x109=(pz*x105);
evalcond[0]=(((pz*x106))+x108+(((-0.066)*x105)));
evalcond[1]=((0.109)+x109+x107+(((0.066)*x106)));
evalcond[2]=((0.088739)+(((-1.0)*(pz*pz)))+(((-0.218)*x109))+(((-0.014388)*x106)));
evalcond[3]=(((x106*x108))+pz+(((0.109)*x105))+((x105*x107)));
evalcond[4]=((0.066)+((x106*x107))+(((0.109)*x106))+(((-1.0)*x105*x108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x110=pz*pz;
CheckValue<IkReal> x111=IKPowWithIntegerCheck(IKsign(((118701.0)+(((27250000.0)*x110)))),-1);
if(!x111.valid){
continue;
}
CheckValue<IkReal> x112 = IKatan2WithCheck(IkReal(((((11092375.0)*pz))+(((-125000000.0)*(pz*pz*pz)))+(((582714.0)*sj2)))),IkReal(((732096.75)+(((-8250000.0)*x110))+(((-8829000.0)*pz*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x112.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x111.value)))+(x112.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x113=IKsin(j1);
IkReal x114=IKcos(j1);
IkReal x115=((0.324)*cj2);
IkReal x116=((0.324)*sj2);
IkReal x117=(pz*x113);
evalcond[0]=(((pz*x114))+(((-0.066)*x113))+x116);
evalcond[1]=((0.109)+x117+x115+(((0.066)*x114)));
evalcond[2]=((0.088739)+(((-1.0)*(pz*pz)))+(((-0.218)*x117))+(((-0.014388)*x114)));
evalcond[3]=(((x114*x116))+((x113*x115))+pz+(((0.109)*x113)));
evalcond[4]=((0.066)+((x114*x115))+(((-1.0)*x113*x116))+(((0.109)*x114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x118=((81000.0)*pz);
CheckValue<IkReal> x119=IKPowWithIntegerCheck(IKsign(((1089.0)+(((250000.0)*(pz*pz))))),-1);
if(!x119.valid){
continue;
}
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x118))+(((5346.0)*sj2))+(((-27250.0)*pz)))),IkReal(((-1798.5)+(((-5346.0)*cj2))+(((-1.0)*sj2*x118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x119.value)))+(x120.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x121=IKsin(j1);
IkReal x122=IKcos(j1);
IkReal x123=((0.324)*cj2);
IkReal x124=((0.324)*sj2);
IkReal x125=(pz*x121);
evalcond[0]=((((-0.066)*x121))+x124+((pz*x122)));
evalcond[1]=((0.109)+x125+x123+(((0.066)*x122)));
evalcond[2]=((0.088739)+(((-0.014388)*x122))+(((-1.0)*(pz*pz)))+(((-0.218)*x125)));
evalcond[3]=(((x121*x123))+((x122*x124))+(((0.109)*x121))+pz);
evalcond[4]=((0.066)+((x122*x123))+(((0.109)*x122))+(((-1.0)*x121*x124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x127.valid){
continue;
}
IkReal x126=x127.value;
j0array[0]=((-1.0)*x126);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x126)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((-1.59277664514668)+(((14.1578887756258)*(px*px)))+(((14.1578887756258)*(pz*pz)))+(((14.1578887756258)*(py*py)))+(((-1.8688413183826)*cj0*px))+(((-1.8688413183826)*py*sj0)));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x128=((20250.0)*cj2);
IkReal x129=(py*sj0);
IkReal x130=(cj0*px);
IkReal x131=((20250.0)*sj2);
j1eval[0]=((1.6544484086533)+cj2);
j1eval[1]=IKsign(((7303.5625)+(((4414.5)*cj2))));
j1eval[2]=((IKabs(((((-6812.5)*pz))+(((-1.0)*pz*x128))+(((1336.5)*sj2))+(((-1.0)*x129*x131))+(((-1.0)*x130*x131)))))+(IKabs(((-449.625)+(((-1.0)*pz*x131))+(((-1336.5)*cj2))+(((6812.5)*x130))+((x128*x130))+(((6812.5)*x129))+((x128*x129))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x132=(cj0*px);
IkReal x133=(py*sj0);
IkReal x134=((250.0)*pz);
IkReal x135=(pz*sj2);
IkReal x136=((45.0375312760634)*cj2);
IkReal x137=((81.0)*cj2);
j1eval[0]=((1.0)+(((-45.0375312760634)*x135))+(((-15.1515151515152)*x132))+(((-15.1515151515152)*x133))+(((-1.0)*x133*x136))+(((2.97247706422018)*cj2))+(((-1.0)*x132*x136)));
j1eval[1]=IKsign(((1.7985)+(((-81.0)*x135))+(((5.346)*cj2))+(((-1.0)*x133*x137))+(((-1.0)*x132*x137))+(((-27.25)*x133))+(((-27.25)*x132))));
j1eval[2]=((IKabs(((((26.244)*cj2*sj2))+((x133*x134))+((x132*x134))+(((8.829)*sj2))+(((-16.5)*pz)))))+(IKabs(((-2.97025)+(((-26.244)*(cj2*cj2)))+(((-17.658)*cj2))+((pz*x134))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x138=py*py;
IkReal x139=cj0*cj0;
IkReal x140=px*px;
IkReal x141=pz*pz;
IkReal x142=(py*sj0);
IkReal x143=((81.0)*sj2);
IkReal x144=(cj0*px);
IkReal x145=((81.0)*cj2);
IkReal x146=((229.568411386593)*x138);
IkReal x147=((250.0)*x138);
IkReal x148=(x139*x140);
j1eval[0]=((-1.0)+(((-1.0)*x146))+(((30.3030303030303)*x144))+(((30.3030303030303)*x142))+(((-459.136822773186)*x142*x144))+(((-229.568411386593)*x148))+(((-229.568411386593)*x141))+((x139*x146)));
j1eval[1]=((IKabs((((pz*x145))+((x142*x143))+(((27.25)*pz))+(((-5.346)*sj2))+((x143*x144)))))+(IKabs(((1.7985)+((pz*x143))+(((-1.0)*x142*x145))+(((5.346)*cj2))+(((-1.0)*x144*x145))+(((-27.25)*x144))+(((-27.25)*x142))))));
j1eval[2]=IKsign(((-1.089)+(((-1.0)*x147))+(((33.0)*x144))+(((33.0)*x142))+(((-500.0)*x142*x144))+(((-250.0)*x148))+(((-250.0)*x141))+((x139*x147))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x149=cj0*cj0;
IkReal x150=py*py;
IkReal x151=(cj0*px);
IkReal x152=(py*sj0);
IkReal x153=((81.0)*sj2);
IkReal x154=((81.0)*cj2);
IkReal x155=((250.0)*x150);
CheckValue<IkReal> x156=IKPowWithIntegerCheck(IKsign(((-1.089)+((x149*x155))+(((-1.0)*x155))+(((33.0)*x151))+(((33.0)*x152))+(((-500.0)*x151*x152))+(((-250.0)*x149*(px*px)))+(((-250.0)*(pz*pz))))),-1);
if(!x156.valid){
continue;
}
CheckValue<IkReal> x157 = IKatan2WithCheck(IkReal((((x152*x153))+(((27.25)*pz))+((x151*x153))+(((-5.346)*sj2))+((pz*x154)))),IkReal(((1.7985)+(((-1.0)*x151*x154))+(((5.346)*cj2))+(((-1.0)*x152*x154))+(((-27.25)*x152))+(((-27.25)*x151))+((pz*x153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x157.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x156.value)))+(x157.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x158=IKsin(j1);
IkReal x159=IKcos(j1);
IkReal x160=(py*sj0);
IkReal x161=((0.324)*sj2);
IkReal x162=(cj0*px);
IkReal x163=((0.324)*cj2);
IkReal x164=((0.218)*x159);
IkReal x165=(pz*x158);
IkReal x166=((1.0)*x159);
evalcond[0]=(pz+((x158*x163))+((x159*x161))+(((0.109)*x158)));
evalcond[1]=((((-0.066)*x158))+x161+((x158*x162))+((x158*x160))+((pz*x159)));
evalcond[2]=((0.066)+(((-1.0)*x158*x161))+(((-1.0)*x160))+(((-1.0)*x162))+((x159*x163))+(((0.109)*x159)));
evalcond[3]=((0.109)+(((-1.0)*x160*x166))+x163+x165+(((-1.0)*x162*x166))+(((0.066)*x159)));
evalcond[4]=((0.088739)+(((-1.0)*(px*px)))+(((-0.014388)*x159))+((x162*x164))+(((0.132)*x160))+(((0.132)*x162))+(((-1.0)*(pz*pz)))+(((-0.218)*x165))+(((-1.0)*(py*py)))+((x160*x164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x167=(py*sj0);
IkReal x168=((250.0)*pz);
IkReal x169=(cj0*px);
IkReal x170=((81.0)*cj2);
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(((((26.244)*cj2*sj2))+((x168*x169))+((x167*x168))+(((8.829)*sj2))+(((-16.5)*pz)))),IkReal(((-2.97025)+(((-26.244)*(cj2*cj2)))+((pz*x168))+(((-17.658)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
CheckValue<IkReal> x172=IKPowWithIntegerCheck(IKsign(((1.7985)+(((5.346)*cj2))+(((-27.25)*x169))+(((-27.25)*x167))+(((-81.0)*pz*sj2))+(((-1.0)*x169*x170))+(((-1.0)*x167*x170)))),-1);
if(!x172.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x171.value)+(((1.5707963267949)*(x172.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x173=IKsin(j1);
IkReal x174=IKcos(j1);
IkReal x175=(py*sj0);
IkReal x176=((0.324)*sj2);
IkReal x177=(cj0*px);
IkReal x178=((0.324)*cj2);
IkReal x179=((0.218)*x174);
IkReal x180=(pz*x173);
IkReal x181=((1.0)*x174);
evalcond[0]=(((x173*x178))+((x174*x176))+pz+(((0.109)*x173)));
evalcond[1]=(((pz*x174))+((x173*x175))+((x173*x177))+x176+(((-0.066)*x173)));
evalcond[2]=((0.066)+(((-1.0)*x177))+(((-1.0)*x175))+((x174*x178))+(((0.109)*x174))+(((-1.0)*x173*x176)));
evalcond[3]=((0.109)+x178+x180+(((-1.0)*x177*x181))+(((-1.0)*x175*x181))+(((0.066)*x174)));
evalcond[4]=((0.088739)+(((-1.0)*(px*px)))+(((-0.014388)*x174))+((x175*x179))+(((-0.218)*x180))+(((-1.0)*(pz*pz)))+(((0.132)*x177))+(((0.132)*x175))+(((-1.0)*(py*py)))+((x177*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x182=((20250.0)*cj2);
IkReal x183=(py*sj0);
IkReal x184=(cj0*px);
IkReal x185=((20250.0)*sj2);
CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(((((-6812.5)*pz))+(((-1.0)*pz*x182))+(((-1.0)*x184*x185))+(((1336.5)*sj2))+(((-1.0)*x183*x185)))),IkReal(((-449.625)+(((6812.5)*x184))+(((6812.5)*x183))+(((-1.0)*pz*x185))+(((-1336.5)*cj2))+((x182*x183))+((x182*x184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x186.valid){
continue;
}
CheckValue<IkReal> x187=IKPowWithIntegerCheck(IKsign(((7303.5625)+(((4414.5)*cj2)))),-1);
if(!x187.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x186.value)+(((1.5707963267949)*(x187.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x188=IKsin(j1);
IkReal x189=IKcos(j1);
IkReal x190=(py*sj0);
IkReal x191=((0.324)*sj2);
IkReal x192=(cj0*px);
IkReal x193=((0.324)*cj2);
IkReal x194=((0.218)*x189);
IkReal x195=(pz*x188);
IkReal x196=((1.0)*x189);
evalcond[0]=(((x188*x193))+((x189*x191))+pz+(((0.109)*x188)));
evalcond[1]=(((pz*x189))+((x188*x190))+((x188*x192))+x191+(((-0.066)*x188)));
evalcond[2]=((0.066)+(((-1.0)*x188*x191))+(((-1.0)*x192))+(((-1.0)*x190))+((x189*x193))+(((0.109)*x189)));
evalcond[3]=((0.109)+(((-1.0)*x192*x196))+(((-1.0)*x190*x196))+x193+x195+(((0.066)*x189)));
evalcond[4]=((0.088739)+(((-1.0)*(px*px)))+(((-0.014388)*x189))+(((-0.218)*x195))+((x192*x194))+(((-1.0)*(pz*pz)))+((x190*x194))+(((0.132)*x190))+(((0.132)*x192))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - example_quadruped_leg (e76e47ad216738094b34264ed20a8b14)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
